---
name: $(Date:yyyyMMdd)$(Rev:.r)

pool:
  name: cloud-team-aks-sc2g

trigger:
  branches:
    include:
      - main
resources:
  repositories:
    - repository: templates
      type: git
      name: AKS/Automation
      ref: refs/tags/pipelines-1.2.1

variables:
  - group: global
  - name: full-image
    value: apscommonacr.azurecr.io/aks/aks-audit-log-go:$(Build.BuildNumber)
  - name: registry-repo
    value: apscommonacr.azurecr.io

stages:
  - stage: UnitTest
    displayName: Unit Tests
    dependsOn:
    jobs:
      - job: tests
        displayName: Testing
        steps:
          - script: |
              set -eo pipefail
              go test -v ./...

  - stage: SecretScan
    displayName: Secret Scan
    dependsOn:
    jobs:
      - template: pipelines/jobs/trivy-secret-scan.yaml@templates

  - stage: CodeScan
    displayName: Code Scan
    dependsOn:
    jobs:
      - job: gosec
        displayName: gosec security scanning
        steps:
          - script: |
              gosec -sort -no-fail -show-ignored -terse -r
            displayName: All issues
          - script: |
              gosec -severity medium -confidence medium -quiet -r
            displayName: Failing issues

  - stage: Lint
    displayName: Lint
    dependsOn:
    jobs:
      - template: pipelines/jobs/yaml-yamllint.yaml@templates
        parameters:
          arguments: "-c .yamllint.yaml"
      - template: pipelines/jobs/trivy-dockerfile-linting.yaml@templates

      - job: goformat
        displayName: Go Formatting
        steps:
          - script: |
              set -eo pipefail
              gofmt_output=$(gofmt -l .)

              if [ -n "$gofmt_output" ]; then
                echo "Some files are not formatted properly:"
                echo "$gofmt_output" | sort -u
                echo "Please run 'gofmt -w .' to fix formatting issues."
                exit 1
              else
                echo "All Go files are properly formatted."
              fi
            failOnStderr: true
            displayName: "Format Check"

      - job: golinting
        displayName: Go Linting
        steps:
          - script: |
              set -eo pipefail
              golangci-lint run --timeout=5m
            displayName: "Run GoLintCLI."

  - stage: Build
    displayName: Build
    dependsOn:
      - UnitTest
      - SecretScan
      - CodeScan
      - Lint
    jobs:
      - job: BuildImage
        displayName: Build, Scan & Push Image
        steps:
          - template: pipelines/jobs/image-buildkit-local-push.yaml@templates
            parameters:
              registryUsername: $(aps-acr-username)
              registryPassword: $(aps-acr-password)
              registryRepo: $(registry-repo)
              fullImage: $(full-image)
              pushImages: true
