---
name: $(Date:yyyyMMdd)$(Rev:.r)

pool:
  name: cloud-team-aks

resources:
  repositories:
    - repository: templates
      type: git
      name: AKS/Automation
trigger: none

pr:
  - main

variables:
  - group: global

stages:
  - stage: UnitTest
    displayName: Unit Tests
    dependsOn:
    jobs:
      - job: tests
        displayName: Testing
        dependsOn:
        steps:
          - script: |
              set -eo pipefail
              go install github.com/jstemmer/go-junit-report@v0.9.1
            displayName: "Install Dependencies"
          - script: |
              set -eo pipefail
              echo '##[section]Starting tests'
              go test -race -v -covermode atomic ./... 2>&1 | go-junit-report -set-exit-code > report.xml 
              kill $brokerPID
            displayName: "Run Tests"
          - task: PublishTestResults@2
            inputs:
              testRunner: JUnit
              testResultsFiles: report.xml
              failTaskOnFailedTests: true

  - stage: SecretScan
    displayName: Secret Scan
    dependsOn:
    jobs:
      - template: pipelines/jobs/trivy-secret-scan.yaml@templates

  - stage: Lint
    displayName: Lint
    jobs:
      - template: pipelines/jobs/yaml-yamllint.yaml@templates
        parameters:
          arguments: "-c .yamllint.yaml"
      - template: pipelines/jobs/trivy-dockerfile-linting.yaml@templates

      - job: goformat
        displayName: Go Formatting
        dependsOn:
        steps:
          - script: |
              gofmt_output=$(gofmt -l .)

              if [ -n "$gofmt_output" ]; then
                echo "Some files are not formatted properly:"
                echo "$gofmt_output" | sort -u
                echo "Please run 'gofmt -w .' to fix formatting issues."
                exit 1
              else
                echo "All Go files are properly formatted."
              fi
            failOnStderr: true
            condition: succeededOrFailed()
            displayName: "Format Check"

      - job: golinting
        displayName: Go Linting
        dependsOn:
        steps:
          - script: |
              golangci-lint run
            displayName: "Run GoLintCLI."

  - stage: Build
    displayName: Build
    dependsOn:
      - UnitTest
      - SecretScan
      - Lint
    jobs:
      - template: pipelines/jobs/image-buildkit-local-push.yaml@templates
