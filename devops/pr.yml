---
name: $(Date:yyyyMMdd)$(Rev:.r)

pool:
  name: cloud-team-aks

resources:
  repositories:
    - repository: templates
      type: git
      name: AKS/Automation
trigger: none

pr:
  - main

variables:
  - group: global

parameters:
  - name: goVersion
    type: string
    default: "1.20"

stages:
  - stage: SecretScan
    displayName: Secret Scan
    dependsOn:
    jobs:
      - template: pipelines/jobs/trivy-secret-scan.yaml@templates

  # TODO: Add unit testing
  # - stage: UnitTest
  #   displayName: Unit Tests
  #   dependsOn:
  #   jobs:
  #     - template: pipelines/jobs/java-gradle-test.yaml@templates

  - stage: Lint
    displayName: Lint
    dependsOn:
    jobs:
      - template: pipelines/jobs/yaml-yamllint.yaml@templates
        parameters:
          arguments: "-c .yamllint.yaml"
      - template: pipelines/jobs/trivy-dockerfile-linting.yaml@templates
      # This section is adapted from the Azure/go-amqp
      # repository's Azure Pipelines configuration.
      - job: golint
        displayName: Go Linting
        dependsOn:
        steps:
          - task: GoTool@0
            inputs:
              version: "${{ parameters.goVersion }}"
            displayName: "Install Go"

          - script: |
              set -e
              export gopathbin=$(go env GOPATH)/bin
              echo "##vso[task.prependpath]$gopathbin"
              # go install github.com/jstemmer/go-junit-report@v0.9.1
              # go install github.com/axw/gocov/gocov@v1.1.0
              # go install github.com/AlekSi/gocov-xml@v1.0.0
              # go install github.com/matm/gocov-html/cmd/gocov-html@v1.2.0
            displayName: "Install Dependencies"

          - script: |
              gofmt_output=$(gofmt -l .)

              if [ -n "$gofmt_output" ]; then
                echo "Some files are not formatted properly:"
                echo "$gofmt_output" | sort -u
                echo "Please run 'gofmt -w .' to fix formatting issues."
                exit 1
              else
                echo "All Go files are properly formatted."
              fi
            failOnStderr: true
            condition: succeededOrFailed()
            displayName: "Format Check"

          # yamllint disable rule:line-length
          - script: |
              curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
              golangci-lint --version
              golangci-lint run
            displayName: "Install and Run GoLintCLI."

  - stage: Build
    displayName: Build
    dependsOn:
      # - UnitTest
      - SecretScan
      - Lint
    jobs:
      - template: pipelines/jobs/image-buildkit-local-push.yaml@templates
